AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SalesApp

  Sample SAM Template for SalesApp

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    Environment:
      Variables:
        TABLE: !Ref Table
        COGNITO: !Ref Cognito
        REGION: !Ref Region
  Api:
    Auth:
      Authorizers:
        SellerIdentifierAuthorizer:
          FunctionPayloadType: TOKEN # OPTIONAL; Defaults to 'TOKEN' when `FunctionArn` is specified
          FunctionArn: !GetAtt SellerIdentifierAuthorizer.Arn
          Identity:
            ReauthorizeEvery: 0 # OPTIONAL; Service Default: 300

Parameters:
  Table:
    Type: String
    Default: SalesApp
  Cognito:
    Type: String
    Default: 1g1qqa4ci8c19bc70rsfvnl8g
  Region:
    Type: String
    Default: us-east-1

Resources:

  AdminAddUserToGroupRole:
      Type: AWS::IAM::Role
      Properties:
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
          - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - 'lambda.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: 'AdminAddUserToGroupPolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - cognito-idp:AdminAddUserToGroup
                  Resource:
                    - "*"
  
  SellerIdentifierAuthorizer:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./
      Handler: tokens.interface.tokens.controller
      Runtime: python3.8
      Architectures:
        - x86_64

  LoginFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./
      Handler: tokens/interface/tokens_controller.login
      Runtime: python3.8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SalesAppTable
      Architectures:
        - x86_64
      Events:
        RegisterSeller:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /login
            Method: post

  RegisterSellerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./ 
      Handler: sellers/interface/sellers_controller.register_seller
      Runtime: python3.8
      Role: !GetAtt AdminAddUserToGroupRole.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SalesAppTable
      Architectures:
        - x86_64
      Events:
        RegisterSeller:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /sellers
            Method: post

  GetSellerProfileFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./ 
      Handler: sellers/interface/sellers_controller.get_seller_profile
      Runtime: python3.8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SalesAppTable
      Architectures:
        - x86_64
      Events:
        GetSellerProfile:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /sellers/{id}
            Method: get
            Auth:
              Authorizer: SellerIdentifierAuthorizer

  ListSellersFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./ 
      Handler: sellers/interface/sellers_controller.list_sellers
      Runtime: python3.8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SalesAppTable
      Architectures:
        - x86_64
      Events:
        ListSellers:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /sellers
            Method: get

  RegisterClientFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./ 
      Handler: clients/interface/clients_controller.register_client
      Runtime: python3.8
      Role: !GetAtt AdminAddUserToGroupRole.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SalesAppTable
      Architectures:
        - x86_64
      Events:
        RegisterClient:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /clients
            Method: post

  GetClientProfileFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./ 
      Handler: clients/interface/clients_controller.get_client_profile
      Runtime: python3.8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SalesAppTable
      Architectures:
        - x86_64
      Events:
        GetClientProfile:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /clients/{id}
            Method: get

  CreateProductFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./ 
      Handler: products/interface/products_controller.create_product
      Runtime: python3.8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SalesAppTable
      Architectures:
        - x86_64
      Events:
        CreateProduct:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /products
            Method: post

  ListProductsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./ 
      Handler: products/interface/products_controller.list_products
      Runtime: python3.8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SalesAppTable
      Architectures:
        - x86_64
      Events:
        ListProducts:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /products
            Method: get

  UpdateProductFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./ 
      Handler: products/interface/products_controller.update_product
      Runtime: python3.8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SalesAppTable
      Architectures:
        - x86_64
      Events:
        UpdateProduct:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /products/{id}
            Method: put

  GeneratePurchaseFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./ 
      Handler: purchases/interface/purchases_controller.generate_purchase
      Runtime: python3.8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SalesAppTable
      Architectures:
        - x86_64
      Events:
        GeneratePurchase:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /purchases
            Method: post

  ListClientPurchasesFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./ 
      Handler: purchases/interface/purchases_controller.get_client_purchases_list
      Runtime: python3.8
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SalesAppTable
      Architectures:
        - x86_64
      Events:
        ListClientPurchases:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /purchases/{id}
            Method: get

  SalesAppTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "pk"
          AttributeType: "S"
        -
          AttributeName: "sk"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "pk"
          KeyType: "HASH"
        -
          AttributeName: "sk"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: "SalesApp"

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  SalesAppApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
